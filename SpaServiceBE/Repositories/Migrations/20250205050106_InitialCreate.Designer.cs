// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Context;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(SpaserviceContext))]
    [Migration("20250205050106_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryEmployee", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoryId");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("employeeId");

                    b.HasKey("CategoryId", "EmployeeId")
                        .HasName("PK__Category__2FD9BD442CF73D8A");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CategoryEmployee", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("roleId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__F267251EDC136022");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ__Account__F3DBC572F6F4CF80")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointmentId");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("employeeId");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("requestId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.HasKey("AppointmentId")
                        .HasName("PK__Appointm__D06765FEFE7307EE");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoryId");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("categoryDescription");

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("categoryImage");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoryName");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__23CAF1D8A4D253FF");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Commission", b =>
                {
                    b.Property<string>("CommissionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("commissionId");

                    b.Property<int>("Percentage")
                        .HasColumnType("int")
                        .HasColumnName("percentage");

                    b.HasKey("CommissionId")
                        .HasName("PK__Commissi__6A570BF27C360413");

                    b.ToTable("Commission", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customerId");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("MembershipId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("membershipId");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("phone");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__B611CB7DD123CF42");

                    b.HasIndex("AccountId");

                    b.HasIndex("MembershipId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("employeeId");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("accountId");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("fullName");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hireDate");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("position");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C134C9C148E32653");

                    b.HasIndex("AccountId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.EmployeeCommission", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("employeeId");

                    b.Property<string>("CommissionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("commissionId");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transactionId");

                    b.Property<float>("CommissionValue")
                        .HasColumnType("real")
                        .HasColumnName("commissionValue");

                    b.HasKey("EmployeeId", "CommissionId", "TransactionId")
                        .HasName("PK__Employee__840AEEB11E590AF8");

                    b.HasIndex("CommissionId");

                    b.HasIndex("TransactionId");

                    b.ToTable("EmployeeCommission", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Feedback", b =>
                {
                    b.Property<string>("FeedbackId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("feedbackId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("createdAt");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("createdBy");

                    b.Property<string>("FeedbackMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("feedbackMessage");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serviceId");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__2613FD2480E83971");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ServiceId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Membership", b =>
                {
                    b.Property<string>("MembershipId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("membershipId");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("discount");

                    b.Property<double?>("TotalPayment")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("MembershipId")
                        .HasName("PK__Membersh__86AA3B17022CD897");

                    b.ToTable("Membership", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Promotion", b =>
                {
                    b.Property<string>("PromotionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("promotionId");

                    b.Property<float>("DiscountValue")
                        .HasColumnType("real")
                        .HasColumnName("discountValue");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("PromotionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("promotionCode");

                    b.Property<string>("PromotionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("promotionName");

                    b.HasKey("PromotionId")
                        .HasName("PK__Promotio__99EB696E44B49C9D");

                    b.HasIndex(new[] { "PromotionCode" }, "UQ__Promotio__E9685770FFA5DACE")
                        .IsUnique();

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Request", b =>
                {
                    b.Property<string>("RequestId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("requestId");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("customerId");

                    b.Property<string>("CustomerNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("customerNote");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("endTime");

                    b.Property<string>("ManagerNote")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("managerNote");

                    b.Property<string>("ServiceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serviceId");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("startTime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.HasKey("RequestId")
                        .HasName("PK__Request__E3C5DE31F2E1788E");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("roleId");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__CD98462A7CAD45DD");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Schedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("scheduleId");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime")
                        .HasColumnName("checkInTime")
                        .HasComment("null if hasn't checked in");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime")
                        .HasColumnName("checkOutTime")
                        .HasComment("null if hasn't checked out");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("employeeId");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("endTime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("startTime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Schedule__A532EDD49C495185");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.SpaService", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serviceId");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoryId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("duration");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("ServiceImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("serviceImage");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serviceName");

                    b.HasKey("ServiceId")
                        .HasName("PK__SpaServi__455070DFB8D54B16");

                    b.HasIndex("CategoryId");

                    b.ToTable("SpaService", (string)null);
                });

            modelBuilder.Entity("Repositories.Entities.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transactionId");

                    b.Property<string>("AppointmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("appointmentId");

                    b.Property<string>("MembershipId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("membershipId");

                    b.Property<string>("PromotionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("promotionId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real")
                        .HasColumnName("totalPrice");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("transactionType");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__9B57CF725A7D221F");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("CategoryEmployee", b =>
                {
                    b.HasOne("Repositories.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FKCategoryEm89344");

                    b.HasOne("Repositories.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FKCategoryEm127434");
                });

            modelBuilder.Entity("Repositories.Entities.Account", b =>
                {
                    b.HasOne("Repositories.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FKAccount946763");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Repositories.Entities.Appointment", b =>
                {
                    b.HasOne("Repositories.Entities.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FKAppointmen55642");

                    b.HasOne("Repositories.Entities.Request", "Request")
                        .WithMany("Appointments")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FKAppointmen118448");

                    b.Navigation("Employee");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.HasOne("Repositories.Entities.Account", "Account")
                        .WithMany("Customers")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer62882");

                    b.HasOne("Repositories.Entities.Membership", "Membership")
                        .WithMany("Customers")
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("FKCustomer595641");

                    b.Navigation("Account");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("Repositories.Entities.Employee", b =>
                {
                    b.HasOne("Repositories.Entities.Account", "Account")
                        .WithMany("Employees")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FKEmployee613705");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Repositories.Entities.EmployeeCommission", b =>
                {
                    b.HasOne("Repositories.Entities.Commission", "Commission")
                        .WithMany("EmployeeCommissions")
                        .HasForeignKey("CommissionId")
                        .IsRequired()
                        .HasConstraintName("FKEmployeeCo818088");

                    b.HasOne("Repositories.Entities.Employee", "Employee")
                        .WithMany("EmployeeCommissions")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FKEmployeeCo384416");

                    b.HasOne("Repositories.Entities.Transaction", "Transaction")
                        .WithMany("EmployeeCommissions")
                        .HasForeignKey("TransactionId")
                        .IsRequired()
                        .HasConstraintName("FKEmployeeCo831824");

                    b.Navigation("Commission");

                    b.Navigation("Employee");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Repositories.Entities.Feedback", b =>
                {
                    b.HasOne("Repositories.Entities.Customer", "CreatedByNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FKFeedback851355");

                    b.HasOne("Repositories.Entities.SpaService", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FKFeedback300803");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Repositories.Entities.Request", b =>
                {
                    b.HasOne("Repositories.Entities.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKRequest796587");

                    b.HasOne("Repositories.Entities.SpaService", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FKRequest464370");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Repositories.Entities.Schedule", b =>
                {
                    b.HasOne("Repositories.Entities.Employee", "Employee")
                        .WithMany("Schedules")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FKSchedule904727");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Repositories.Entities.SpaService", b =>
                {
                    b.HasOne("Repositories.Entities.Category", "Category")
                        .WithMany("SpaServices")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FKSpaService221665");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Repositories.Entities.Transaction", b =>
                {
                    b.HasOne("Repositories.Entities.Appointment", "Appointment")
                        .WithMany("Transactions")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FKTransactio520442");

                    b.HasOne("Repositories.Entities.Membership", "Membership")
                        .WithMany("Transactions")
                        .HasForeignKey("MembershipId")
                        .HasConstraintName("FKTransactio702984");

                    b.HasOne("Repositories.Entities.Promotion", "Promotion")
                        .WithMany("Transactions")
                        .HasForeignKey("PromotionId")
                        .HasConstraintName("FKTransactio965842");

                    b.Navigation("Appointment");

                    b.Navigation("Membership");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Repositories.Entities.Account", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Repositories.Entities.Appointment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Repositories.Entities.Category", b =>
                {
                    b.Navigation("SpaServices");
                });

            modelBuilder.Entity("Repositories.Entities.Commission", b =>
                {
                    b.Navigation("EmployeeCommissions");
                });

            modelBuilder.Entity("Repositories.Entities.Customer", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Repositories.Entities.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("EmployeeCommissions");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Repositories.Entities.Membership", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Repositories.Entities.Promotion", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Repositories.Entities.Request", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Repositories.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Repositories.Entities.SpaService", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Repositories.Entities.Transaction", b =>
                {
                    b.Navigation("EmployeeCommissions");
                });
#pragma warning restore 612, 618
        }
    }
}
